---
version: 0.2
phases:
  install:
    commands:
      # Install aws-iam-authenticator and kubectl
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
      - curl -sS -o kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=${PWD}/:${PATH}

      # Install AWS CLI v2
      - curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o ~/awscliv2.zip
      - unzip -q ~/awscliv2.zip -d ~/
      - ~/aws/install

  pre_build:
    commands:
      # Dynamically set the image name in the deployment manifest
      - TAG=${CODEBUILD_BUILD_NUMBER}
      - echo ${REPOSITORY_URI}:${TAG}
      - sed -i 's@CONTAINER_IMAGE@'"${REPOSITORY_URI}:${TAG}"'@' app-eks.yml
      
      # Set KUBECONFIG
      - export KUBECONFIG=$HOME/.kube/config

  build:
    commands:
      # Login Docker
      - echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin

      # Check Docker Hub rate limit
      # - TOKEN=$(curl --user "${DOCKER_USERNAME}:${DOCKER_PASSWORD}" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
      # - echo $(curl --head -H "Authorization:Bearer ${TOKEN}" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest | grep -i rate)
      
      # Build the image
      - docker build --tag ${REPOSITORY_URI}:${TAG} .

      # Login to ECR
      - ECR_USERNAME=AWS
      - ECR_PASSWORD=$(aws ecr get-login-password --region ${AWS_DEFAULT_REGION})
      - >-
        echo ${ECR_PASSWORD} | 
          docker login --username ${ECR_USERNAME} --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com

  post_build:
    commands:
      # Create Repository if not exists
      - >-
        aws ecr describe-repositories --repository-names ${REPOSITORY_URI##*/} ||
        aws ecr create-repository --repository-name ${REPOSITORY_URI##*/} --image-scanning-configuration scanOnPush=true --region ${AWS_DEFAULT_REGION}

      # Push to ECR
      - docker tag ${REPOSITORY_URI}:${TAG} ${REPOSITORY_URI}:latest
      - docker images
      - docker push ${REPOSITORY_URI}:${TAG}
      - docker push ${REPOSITORY_URI}:latest

      # Scan Image using tmas
      - >-
        docker run --cap-drop ALL --rm --name tmas
        -e CLOUD_ONE_API_KEY=${CLOUD_ONE_SCANNER_API_KEY}
        mawinkler/tmas -t medium -u ${ECR_USERNAME} -p ${ECR_PASSWORD} registry:${REPOSITORY_URI}:${TAG} | tee findings.json

      # Assume Role to manage Kubernetes
      - CREDENTIALS=$(aws sts assume-role --role-arn ${EKS_KUBECTL_ROLE_ARN} --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')

      # Update EKS KubeConfig
      - aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}

      # Deploy to EKS
      - kubectl apply -f app-eks.yml
      - printf '[{"name":"c1-app-sec-uploader","imageUri":"%s"}]' ${REPOSITORY_URI}:${TAG} > build.json


artifacts:
  files:
    - build.json
    - findings.json
