#/bin/bash
# ##############################################################################
# Pulls an image, initiates a scan with Smart Check and creates a PDF report
# ##############################################################################

# source helpers
.  $PGPATH/bin/playground-helpers.sh

# ##############################################################
# Scan Image
# ##############################################################
function scan_image {

  get_smartcheck

  if [ ${SYNC} == false ]; then
    eval docker run --rm --read-only --cap-drop ALL -v /var/run/docker.sock:/var/run/docker.sock --network host \
      deepsecurity/smartcheck-scan-action \
      --image-name "${IMAGE_NAME}" \
      --smartcheck-host="${SC_HOST}:${SC_PORT}" \
      --smartcheck-user="${SC_USERNAME}" \
      --smartcheck-password="${SC_PASSWORD}" \
      --image-pull-auth="${PULL_AUTH}" \
      --insecure-skip-registry-tls-verify \
      --insecure-skip-tls-verify &>/dev/null & disown || true
  else
    RESULT=$(docker run --rm --read-only --cap-drop ALL -v /var/run/docker.sock:/var/run/docker.sock --network host \
      deepsecurity/smartcheck-scan-action \
      --image-name "${IMAGE_NAME}" \
      --smartcheck-host "${SC_HOST}:${SC_PORT}" \
      --smartcheck-user "${SC_USERNAME}" \
      --smartcheck-password "${SC_PASSWORD}" \
      --image-pull-auth "${PULL_AUTH}" \
      --insecure-skip-registry-tls-verify \
      --insecure-skip-tls-verify)
    echo $RESULT | jq -r '.findings'
  fi
}

# ##############################################################
# Local Kind Cluster
# ##############################################################
function pullpush_registry {

  REG_USERNAME="$(yq '.services[] | select(.name=="playground-registry") | .username' $PGPATH/config.yaml)"
  REG_PASSWORD="$(yq '.services[] | select(.name=="playground-registry") | .password' $PGPATH/config.yaml)"

  get_registry

  printf '%s\n' "Cluster registry is on ${REGISTRY}"

  echo ${REG_PASSWORD} | docker login ${REGISTRY} --username ${REG_USERNAME} --password-stdin > /dev/null 2>&1
  docker pull ${TARGET_IMAGE}
  # Tag and push, but strip hash
  docker tag ${TARGET_IMAGE} ${REGISTRY}/${TARGET_IMAGE%@*}
  docker push ${REGISTRY}/${TARGET_IMAGE%@*}
}

function scan_registry {

  printf '%s\n' "Create Registry Pull Auth"
  PULL_AUTH='{"username":"'${REG_USERNAME}'","password":"'${REG_PASSWORD}'"}'
  IMAGE_NAME="${REGISTRY}/${TARGET_IMAGE%@*}"

  # Scan
  scan_image
}

# ##############################################################
# GKE
# ##############################################################
function pullpush_gcp {

  get_registry

  GCP_HOSTNAME="gcr.io"
  GCP_PROJECTID=$(gcloud config list --format 'value(core.project)' 2>/dev/null)
  printf '%s\n' "GCP Project is ${GCP_PROJECTID}"
  GCR_SERVICE_ACCOUNT=service-gcrsvc
  if test -f "${GCR_SERVICE_ACCOUNT}_keyfile.json"; then
    printf '%s\n' "Using existing key file"
  else
    printf '%s\n' "Creating Service Account"
    echo ${GCR_SERVICE_ACCOUNT}_keyfile.json
    gcloud iam service-accounts create ${GCR_SERVICE_ACCOUNT}
    gcloud projects add-iam-policy-binding ${GCP_PROJECTID} --member "serviceAccount:${GCR_SERVICE_ACCOUNT}@${GCP_PROJECTID}.iam.gserviceaccount.com" --role "roles/storage.admin"
    gcloud iam service-accounts keys create ${GCR_SERVICE_ACCOUNT}_keyfile.json --iam-account ${GCR_SERVICE_ACCOUNT}@${GCP_PROJECTID}.iam.gserviceaccount.com
  fi

  cat ${GCR_SERVICE_ACCOUNT}_keyfile.json | docker login -u _json_key --password-stdin https://${GCP_HOSTNAME} > /dev/null 2>&1
  docker pull ${TARGET_IMAGE}
  # Tag and push, but strip hash
  docker tag ${TARGET_IMAGE} ${REGISTRY}/${TARGET_IMAGE%@*}
  docker push ${REGISTRY}/${TARGET_IMAGE%@*}
}

function scan_gcp {

  printf '%s\n' "Create Registry Pull Auth"
  JSON_KEY=$(cat ${GCR_SERVICE_ACCOUNT}_keyfile.json | jq tostring)
  PULL_AUTH='{"username":"_json_key","password":'${JSON_KEY}'}'
  IMAGE_NAME="${REGISTRY}/${TARGET_IMAGE%@*}"
  
  # Scan
  scan_image
}

# ##############################################################
# AKS
# ##############################################################
function pullpush_aks {

  get_registry

  printf '%s\n' "Retrieving Container Registry Credentials"
  az acr update -n ${REGISTRY} --admin-enabled true 1>/dev/null
  ACR_CREDENTIALS=$(az acr credential show --name ${REGISTRY})
  ACR_PASSWORD=$(jq -r '.passwords[] | select(.name=="password") | .value' <<< $ACR_CREDENTIALS)
  ACR_USERNAME=$(jq -r '.username' <<< $ACR_CREDENTIALS)

  # Login, pull, push
  printf '%s\n' "Login to Container Registry, pull, tag and push"
  echo ${ACR_PASSWORD} | docker login -u ${ACR_USERNAME} --password-stdin https://${REGISTRY} > /dev/null 2>&1
  docker pull ${TARGET_IMAGE}
  # Tag and push, but strip hash
  docker tag ${TARGET_IMAGE} ${REGISTRY}/${TARGET_IMAGE%@*}
  docker push ${REGISTRY}/${TARGET_IMAGE%@*}
}

function scan_aks {

  printf '%s\n' "Create Registry Pull Auth"
  PULL_AUTH='{"username":"'${ACR_USERNAME}'","password":"'${ACR_PASSWORD}'"}'
  IMAGE_NAME="${REGISTRY}/${TARGET_IMAGE%@*}"
  
  # Scan
  scan_image
}

# ##############################################################
# EKS
# ##############################################################
function pullpush_eks {

  get_registry

  curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
  chmod +x ./aws-iam-authenticator

  AWS_REGION=$(aws configure get region)
  IMAGE_TAG=(${TARGET_IMAGE//:/ })
  if [ $(aws ecr describe-repositories --repository-names ${IMAGE_TAG[0]} --output text --query repositories[].repositoryName 2>/dev/null) ] ; then
    printf '%s\n' "Using Container Repository ${IMAGE_TAG[0]}"
  else
    printf '%s\n' "Creating Container Repository ${IMAGE_TAG[0]}"
    aws ecr create-repository --repository-name ${IMAGE_TAG[0]} --image-scanning-configuration scanOnPush=true --region ${AWS_REGION}
  fi

  # Login, pull, push
  ECR_USERNAME=AWS
  ECR_PASSWORD=$(aws ecr get-login-password --region ${AWS_REGION})
  echo ${ECR_PASSWORD} | 
    docker login --username ${ECR_USERNAME} --password-stdin ${REGISTRY} > /dev/null 2>&1
  docker pull ${TARGET_IMAGE}
  # Tag and push, but strip hash
  docker tag ${TARGET_IMAGE} ${REGISTRY}/${TARGET_IMAGE%@*}
  docker push ${REGISTRY}/${TARGET_IMAGE%@*}
}

function scan_eks {

  PULL_AUTH='{"aws":{"region":"'${AWS_REGION}'"}}'
  IMAGE_NAME="${REGISTRY}/${TARGET_IMAGE%@*}"

  # Scan
  scan_image
}

# ##############################################################
# Main
# ##############################################################
# If no parameter was given and TARGET_IMAGE is not set in env, default to rhel7
TARGET_IMAGE=${TARGET_IMAGE:-richxsl/rhel7:latest}
SYNC=true

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -as|--async)
      SYNC=false
      shift # past argument
      ;;
    -so|--source-only)
      return
      ;;
    *)    # should be the image name and tag
      TARGET_IMAGE=${1}
      shift # past argument
      ;;
  esac
done

echo "Scanning Image ${TARGET_IMAGE}"

if is_gke ; then
  printf '%s\n' "Running on GKE"
  pullpush_gcp
  scan_gcp
elif is_aks ; then
  printf '%s\n' "Running on AKS"
  pullpush_aks
  scan_aks
elif is_eks ; then
  printf '%s\n' "Running on EKS"
  pullpush_eks
  scan_eks
else
  printf '%s\n' "Running on local Playground"
  pullpush_registry
  scan_registry
fi
